#!/usr/bin/env ruby

require 'date'
IMPEDIMENT_TAG = "@blocked"

if ARGV[0] == "usage"
  puts "  Standup Report:"
  puts "    standup"
  puts "      Generates a report of tasks completed \"Yesterday\", and tasks left to do"
  puts "  "
else
  today = Date.today
  todays_completed = []
  impediments = []


  #read DONE file
  done = File.read(ENV['DONE_FILE'])
  done = done.split($/)
  done.reverse!

  #read TODO file
  todo = File.read(ENV['TODO_FILE'])
  todo = todo.split($/)

  filter = ARGV[1] or nil

  if filter
    done = done.select { |item| item.include?(filter) }
    todo = todo.select { |item| item.include?(filter) }
  end

  # ==============================
  #    generate YESTERDAY's List
  # ==============================

  #define 'yesterday' as the last date on the done file that is not 'today'
  i = 0
  begin
    data = /x\s(?<date>\d{4}-\d{2}-\d{2})\s(?<task>.*)/.match(done[i]);
    yesterday  = Date.strptime(data[:date], '%Y-%m-%d')
    i += 1
  end until today != yesterday and !yesterday.sunday? and !yesterday.saturday?

  if today.mjd - yesterday.mjd <= 1
    label = "Yesterday"
  else
    label = yesterday.strftime('%A')
  end

  puts "\n========================================"
  puts "#{label}: #{yesterday}"
  puts "========================================"


  #dump out the list
  done.sort!
  done.each { |item|
    if ARGV[1]
      passes_filter = item.include?(ARGV[1])
    else
      passes_filter = true
    end

    if passes_filter
      data =  /x\s(?<date>\d{4}-\d{2}-\d{2})\s(?<task>.*)/.match(item)
      task_date = Date.strptime(data[:date], '%Y-%m-%d')
      #puts task_date
      if task_date == yesterday
        puts "+ #{data[:task]}"
      elsif task_date == today
        todays_completed.push(data[:task])
      elsif task_date < today and task_date > yesterday
      end
    end
  }

  # TODO: do stuff with "other_tasks"

  # ==============================
  #    generate TODAY's List
  # ==============================

  puts "\n========================================"
  puts "Today: #{Date.today}"
  puts "========================================"

  #dumpe TODAY's COMPLETED
  todays_completed.each { |task|
    if ARGV[1]
      passes_filter = task.include?(ARGV[1])
    else
      passes_filter = true
    end

    puts "+ #{task}" if passes_filter
  }

  todo.sort!  # order by priority

  #dump  TODAY's List
  todo.each { |task|
    if ARGV[1]
      passes_filter = task.include?(ARGV[1])
    else
      passes_filter = true
    end

    if passes_filter
      if task.include?(IMPEDIMENT_TAG)
        impediments.push(task)
      else
        puts "- #{task}"
      end
    end
  }

  #generate IMPEDIMENT's List
  if impediments.length > 0
    puts "\n========================================"
    puts "Blocked: #{Date.today}"
    puts "========================================"

    impediments.each { |task|
      puts"! #{task}"
    }
  end

  puts "\n"
end

